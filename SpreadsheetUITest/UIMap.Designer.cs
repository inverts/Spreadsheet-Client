// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// enterInValues - Use 'enterInValuesParams' to pass parameters into this method.
        /// </summary>
        public void enterInValues()
        {
            #region Variable Declarations
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UIFauxcelSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Type '25' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.enterInValuesParams.UIFormulaBoxEditText;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.enterInValuesParams.UIFormulaBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(146, 43));

            // Type '35' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.enterInValuesParams.UIFormulaBoxEditText1;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(206, 41));

            // Type '=A1+B1' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.enterInValuesParams.UIFormulaBoxEditText2;
        }
        
        /// <summary>
        /// assertCorrectValues - Use 'assertCorrectValuesExpectedValues' to pass parameters into this method.
        /// </summary>
        public void assertCorrectValues()
        {
            #region Variable Declarations
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            WinEdit uIValueBoxEdit = this.UIFauxcelSpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uICellNameBoxEdit = this.UIFauxcelSpreadsheetWindow.UICellNameBoxWindow.UICellNameBoxEdit;
            #endregion

            // Verify that 'formulaBox' text box's property 'SelectionText' equals '=A1+B1'
            Assert.AreEqual(this.assertCorrectValuesExpectedValues.UIFormulaBoxEditSelectionText, uIFormulaBoxEdit.SelectionText);

            // Verify that 'valueBox' text box's property 'Text' equals '60'
            Assert.AreEqual(this.assertCorrectValuesExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that 'cellNameBox' text box's property 'Text' equals 'C1'
            Assert.AreEqual(this.assertCorrectValuesExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);
        }
        
        /// <summary>
        /// editAValue - Use 'editAValueParams' to pass parameters into this method.
        /// </summary>
        public void editAValue()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIFauxcelSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(61, 43));

            // Type '=B1' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.editAValueParams.UIFormulaBoxEditText;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.editAValueParams.UIFormulaBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// assertCorrectEditedValues - Use 'assertCorrectEditedValuesExpectedValues' to pass parameters into this method.
        /// </summary>
        public void assertCorrectEditedValues()
        {
            #region Variable Declarations
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            WinEdit uIValueBoxEdit = this.UIFauxcelSpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uICellNameBoxEdit = this.UIFauxcelSpreadsheetWindow.UICellNameBoxWindow.UICellNameBoxEdit;
            #endregion

            // Verify that 'formulaBox' text box's property 'Text' equals '=B1'
            Assert.AreEqual(this.assertCorrectEditedValuesExpectedValues.UIFormulaBoxEditText, uIFormulaBoxEdit.Text);

            // Verify that 'valueBox' text box's property 'Text' equals '35'
            Assert.AreEqual(this.assertCorrectEditedValuesExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that 'cellNameBox' text box's property 'Text' equals 'A1'
            Assert.AreEqual(this.assertCorrectEditedValuesExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);
        }
        
        /// <summary>
        /// selectUpdatedFormula
        /// </summary>
        public void selectUpdatedFormula()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIFauxcelSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(217, 42));
        }
        
        /// <summary>
        /// assertCorrectFormulaUpdate - Use 'assertCorrectFormulaUpdateExpectedValues' to pass parameters into this method.
        /// </summary>
        public void assertCorrectFormulaUpdate()
        {
            #region Variable Declarations
            WinEdit uIValueBoxEdit = this.UIFauxcelSpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            #endregion

            // Verify that 'valueBox' text box's property 'Text' equals '70'
            Assert.AreEqual(this.assertCorrectFormulaUpdateExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);
        }
        
        /// <summary>
        /// createAndSaveSpreadsheet - Use 'createAndSaveSpreadsheetParams' to pass parameters into this method.
        /// </summary>
        public void createAndSaveSpreadsheet()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UIFauxcelSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow1.UIFormulaBoxWindow.UIFormulaBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UIFauxcelSpreadsheetWindow1.UIItemWindow.UISpreadsheetPanel1Client;
            WinMenuItem uISaveMenuItem = this.UIFauxcelSpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UISaveAsWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uINOButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UINOButton;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(28, 6));

            // Type 'Hello' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.createAndSaveSpreadsheetParams.UIFormulaBoxEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(97, 68));

            // Type 'World' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.createAndSaveSpreadsheetParams.UIFormulaBoxEditText1;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(150, 67));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(300, 77));

            // Type 'Cell D3' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.createAndSaveSpreadsheetParams.UIFormulaBoxEditText2;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(256, 136));

            // Type '=5+1' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.createAndSaveSpreadsheetParams.UIFormulaBoxEditText3;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.createAndSaveSpreadsheetParams.UIFormulaBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(289, 138));

            // Type '=' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.createAndSaveSpreadsheetParams.UIFormulaBoxEditText4;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(234, 143));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(291, 143));

            // Type '=C6' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.createAndSaveSpreadsheetParams.UIFormulaBoxEditText5;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.createAndSaveSpreadsheetParams.UIFormulaBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(163, 144));

            // Type '=D6+5' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.createAndSaveSpreadsheetParams.UIFormulaBoxEditText6;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.createAndSaveSpreadsheetParams.UIFormulaBoxEditSendKeys2, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(59, 16));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(20, 5));

            // Select 'test.txt' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.createAndSaveSpreadsheetParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(28, 15));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(43, 16));

            // Select 'test' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.createAndSaveSpreadsheetParams.UIFilenameComboBoxEditableItem1;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(21, 15));
        }
        
        #region Properties
        public virtual enterInValuesParams enterInValuesParams
        {
            get
            {
                if ((this.menterInValuesParams == null))
                {
                    this.menterInValuesParams = new enterInValuesParams();
                }
                return this.menterInValuesParams;
            }
        }
        
        public virtual assertCorrectValuesExpectedValues assertCorrectValuesExpectedValues
        {
            get
            {
                if ((this.massertCorrectValuesExpectedValues == null))
                {
                    this.massertCorrectValuesExpectedValues = new assertCorrectValuesExpectedValues();
                }
                return this.massertCorrectValuesExpectedValues;
            }
        }
        
        public virtual editAValueParams editAValueParams
        {
            get
            {
                if ((this.meditAValueParams == null))
                {
                    this.meditAValueParams = new editAValueParams();
                }
                return this.meditAValueParams;
            }
        }
        
        public virtual assertCorrectEditedValuesExpectedValues assertCorrectEditedValuesExpectedValues
        {
            get
            {
                if ((this.massertCorrectEditedValuesExpectedValues == null))
                {
                    this.massertCorrectEditedValuesExpectedValues = new assertCorrectEditedValuesExpectedValues();
                }
                return this.massertCorrectEditedValuesExpectedValues;
            }
        }
        
        public virtual assertCorrectFormulaUpdateExpectedValues assertCorrectFormulaUpdateExpectedValues
        {
            get
            {
                if ((this.massertCorrectFormulaUpdateExpectedValues == null))
                {
                    this.massertCorrectFormulaUpdateExpectedValues = new assertCorrectFormulaUpdateExpectedValues();
                }
                return this.massertCorrectFormulaUpdateExpectedValues;
            }
        }
        
        public virtual createAndSaveSpreadsheetParams createAndSaveSpreadsheetParams
        {
            get
            {
                if ((this.mcreateAndSaveSpreadsheetParams == null))
                {
                    this.mcreateAndSaveSpreadsheetParams = new createAndSaveSpreadsheetParams();
                }
                return this.mcreateAndSaveSpreadsheetParams;
            }
        }
        
        public UIFauxcelSpreadsheetWindow UIFauxcelSpreadsheetWindow
        {
            get
            {
                if ((this.mUIFauxcelSpreadsheetWindow == null))
                {
                    this.mUIFauxcelSpreadsheetWindow = new UIFauxcelSpreadsheetWindow();
                }
                return this.mUIFauxcelSpreadsheetWindow;
            }
        }
        
        public UIFauxcelSpreadsheetWindow1 UIFauxcelSpreadsheetWindow1
        {
            get
            {
                if ((this.mUIFauxcelSpreadsheetWindow1 == null))
                {
                    this.mUIFauxcelSpreadsheetWindow1 = new UIFauxcelSpreadsheetWindow1();
                }
                return this.mUIFauxcelSpreadsheetWindow1;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        #endregion
        
        #region Fields
        private enterInValuesParams menterInValuesParams;
        
        private assertCorrectValuesExpectedValues massertCorrectValuesExpectedValues;
        
        private editAValueParams meditAValueParams;
        
        private assertCorrectEditedValuesExpectedValues massertCorrectEditedValuesExpectedValues;
        
        private assertCorrectFormulaUpdateExpectedValues massertCorrectFormulaUpdateExpectedValues;
        
        private createAndSaveSpreadsheetParams mcreateAndSaveSpreadsheetParams;
        
        private UIFauxcelSpreadsheetWindow mUIFauxcelSpreadsheetWindow;
        
        private UIFauxcelSpreadsheetWindow1 mUIFauxcelSpreadsheetWindow1;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'enterInValues'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class enterInValuesParams
    {
        
        #region Fields
        /// <summary>
        /// Type '25' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText = "25";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '35' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText1 = "35";
        
        /// <summary>
        /// Type '=A1+B1' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText2 = "=A1+B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'assertCorrectValues'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class assertCorrectValuesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'formulaBox' text box's property 'SelectionText' equals '=A1+B1'
        /// </summary>
        public string UIFormulaBoxEditSelectionText = "=A1+B1";
        
        /// <summary>
        /// Verify that 'valueBox' text box's property 'Text' equals '60'
        /// </summary>
        public string UIValueBoxEditText = "60";
        
        /// <summary>
        /// Verify that 'cellNameBox' text box's property 'Text' equals 'C1'
        /// </summary>
        public string UICellNameBoxEditText = "C1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'editAValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class editAValueParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=B1' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText = "=B1";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'assertCorrectEditedValues'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class assertCorrectEditedValuesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'formulaBox' text box's property 'Text' equals '=B1'
        /// </summary>
        public string UIFormulaBoxEditText = "=B1";
        
        /// <summary>
        /// Verify that 'valueBox' text box's property 'Text' equals '35'
        /// </summary>
        public string UIValueBoxEditText = "35";
        
        /// <summary>
        /// Verify that 'cellNameBox' text box's property 'Text' equals 'A1'
        /// </summary>
        public string UICellNameBoxEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'assertCorrectFormulaUpdate'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class assertCorrectFormulaUpdateExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'valueBox' text box's property 'Text' equals '70'
        /// </summary>
        public string UIValueBoxEditText = "70";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'createAndSaveSpreadsheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class createAndSaveSpreadsheetParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText = "Hello";
        
        /// <summary>
        /// Type 'World' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText1 = "World";
        
        /// <summary>
        /// Type 'Cell D3' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText2 = "Cell D3";
        
        /// <summary>
        /// Type '=5+1' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText3 = "=5+1";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText4 = "=";
        
        /// <summary>
        /// Type '=C6' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText5 = "=C6";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=D6+5' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText6 = "=D6+5";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Select 'test.txt' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test.txt";
        
        /// <summary>
        /// Select 'test' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "test";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFauxcelSpreadsheetWindow : WinWindow
    {
        
        public UIFauxcelSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Fauxcel Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFormulaBoxWindow UIFormulaBoxWindow
        {
            get
            {
                if ((this.mUIFormulaBoxWindow == null))
                {
                    this.mUIFormulaBoxWindow = new UIFormulaBoxWindow(this);
                }
                return this.mUIFormulaBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIValueBoxWindow UIValueBoxWindow
        {
            get
            {
                if ((this.mUIValueBoxWindow == null))
                {
                    this.mUIValueBoxWindow = new UIValueBoxWindow(this);
                }
                return this.mUIValueBoxWindow;
            }
        }
        
        public UICellNameBoxWindow UICellNameBoxWindow
        {
            get
            {
                if ((this.mUICellNameBoxWindow == null))
                {
                    this.mUICellNameBoxWindow = new UICellNameBoxWindow(this);
                }
                return this.mUICellNameBoxWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIFormulaBoxWindow mUIFormulaBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIValueBoxWindow mUIValueBoxWindow;
        
        private UICellNameBoxWindow mUICellNameBoxWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFormulaBoxWindow : WinWindow
    {
        
        public UIFormulaBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "formulaBox";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFormulaBoxEdit
        {
            get
            {
                if ((this.mUIFormulaBoxEdit == null))
                {
                    this.mUIFormulaBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFormulaBoxEdit.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUIFormulaBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFormulaBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIValueBoxWindow : WinWindow
    {
        
        public UIValueBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "valueBox";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueBoxEdit
        {
            get
            {
                if ((this.mUIValueBoxEdit == null))
                {
                    this.mUIValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueBoxEdit.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUIValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICellNameBoxWindow : WinWindow
    {
        
        public UICellNameBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellNameBox";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameBoxEdit
        {
            get
            {
                if ((this.mUICellNameBoxEdit == null))
                {
                    this.mUICellNameBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameBoxEdit.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUICellNameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFauxcelSpreadsheetWindow1 : WinWindow
    {
        
        public UIFauxcelSpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Fauxcel Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFormulaBoxWindow1 UIFormulaBoxWindow
        {
            get
            {
                if ((this.mUIFormulaBoxWindow == null))
                {
                    this.mUIFormulaBoxWindow = new UIFormulaBoxWindow1(this);
                }
                return this.mUIFormulaBoxWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIFormulaBoxWindow1 mUIFormulaBoxWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFormulaBoxWindow1 : WinWindow
    {
        
        public UIFormulaBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "formulaBox";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFormulaBoxEdit
        {
            get
            {
                if ((this.mUIFormulaBoxEdit == null))
                {
                    this.mUIFormulaBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFormulaBoxEdit.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUIFormulaBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFormulaBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
}
