// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// basicCellEntry - Use 'basicCellEntryParams' to pass parameters into this method.
        /// </summary>
        public void basicCellEntry()
        {
            #region Variable Declarations
            WinWindow uIFormulaBoxWindow = this.UIFauxcelSpreadsheetWindow.UIFormLayoutWindow.UIFormulaBoxWindow;
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.vshost.exe'
            ApplicationUnderTest uIFauxcelSpreadsheetWindow = ApplicationUnderTest.Launch(this.basicCellEntryParams.UIFauxcelSpreadsheetWindowExePath, this.basicCellEntryParams.UIFauxcelSpreadsheetWindowAlternateExePath);

            // Double-Click 'formulaBox' window
            Mouse.DoubleClick(uIFormulaBoxWindow, new Point(97, -1));

            // Type '25' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.basicCellEntryParams.UIFormulaBoxEditText;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.basicCellEntryParams.UIFormulaBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// DataEntryTest - Use 'DataEntryTestParams' to pass parameters into this method.
        /// </summary>
        public void DataEntryTest()
        {
            #region Variable Declarations
            WinWindow uIFormulaBoxWindow = this.UIFauxcelSpreadsheetWindow.UIFormLayoutWindow.UIFormulaBoxWindow;
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.vshost.exe'
            ApplicationUnderTest uIFauxcelSpreadsheetWindow = ApplicationUnderTest.Launch(this.DataEntryTestParams.UIFauxcelSpreadsheetWindowExePath, this.DataEntryTestParams.UIFauxcelSpreadsheetWindowAlternateExePath);

            // Double-Click 'formulaBox' window
            Mouse.DoubleClick(uIFormulaBoxWindow, new Point(97, -1));

            // Type '25' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.DataEntryTestParams.UIFormulaBoxEditText;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.DataEntryTestParams.UIFormulaBoxEditSendKeys, ModifierKeys.None);

            // Type '25' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.DataEntryTestParams.UIFormulaBoxEditText1;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.DataEntryTestParams.UIFormulaBoxEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// basicCellEnntry - Use 'basicCellEnntryParams' to pass parameters into this method.
        /// </summary>
        public void basicCellEnntry()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIReleaseWindow.UIItemWindow.UISpreadsheetGUIexeListItem.UINameEdit;
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(81, 7));

            // Type '25' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.basicCellEnntryParams.UIFormulaBoxEditText;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.basicCellEnntryParams.UIFormulaBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// cellEntrySuccess - Use 'cellEntrySuccessExpectedValues' to pass parameters into this method.
        /// </summary>
        public void cellEntrySuccess()
        {
            #region Variable Declarations
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            #endregion

            // Verify that 'formulaBox' text box's property 'Text' equals '25'
            Assert.AreEqual(this.cellEntrySuccessExpectedValues.UIFormulaBoxEditText, uIFormulaBoxEdit.Text);
        }
        
        /// <summary>
        /// formulaCellEntry - Use 'formulaCellEntryParams' to pass parameters into this method.
        /// </summary>
        public void formulaCellEntry()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIFauxcelSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(154, 37));

            // Type '=8*9+(14-4)' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.formulaCellEntryParams.UIFormulaBoxEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(141, 56));
        }
        
        /// <summary>
        /// checkCellNameDisplay - Use 'checkCellNameDisplayExpectedValues' to pass parameters into this method.
        /// </summary>
        public void checkCellNameDisplay()
        {
            #region Variable Declarations
            WinEdit uICellNameBoxEdit = this.UIFauxcelSpreadsheetWindow.UICellNameBoxWindow.UICellNameBoxEdit;
            #endregion

            // Verify that 'cellNameBox' text box's property 'Text' equals 'B2'
            Assert.AreEqual(this.checkCellNameDisplayExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);
        }
        
        /// <summary>
        /// inputInvalidFormula - Use 'inputInvalidFormulaParams' to pass parameters into this method.
        /// </summary>
        public void inputInvalidFormula()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIFauxcelSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(215, 42));

            // Type '=' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.inputInvalidFormulaParams.UIFormulaBoxEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(147, 38));
        }
        
        /// <summary>
        /// assertFormulaErrorAndOtherFields - Use 'assertFormulaErrorAndOtherFieldsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void assertFormulaErrorAndOtherFields()
        {
            #region Variable Declarations
            WinText uIYourformulahasanerroText = this.UIFauxcelSpreadsheetWindow.UIStatusStrip1StatusBar.UIYourformulahasanerroText;
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            WinEdit uIValueBoxEdit = this.UIFauxcelSpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uICellNameBoxEdit = this.UIFauxcelSpreadsheetWindow.UICellNameBoxWindow.UICellNameBoxEdit;
            #endregion

            // Verify that 'Your formula has an error: There must be at least ...' label's property 'FriendlyName' equals 'Your formula has an error: There must be at least one token in your formula.'
            Assert.AreEqual(this.assertFormulaErrorAndOtherFieldsExpectedValues.UIYourformulahasanerroTextFriendlyName, uIYourformulahasanerroText.FriendlyName);

            // Verify that 'formulaBox' text box's property 'Text' equals '=8*9+(14-4)'
            Assert.AreEqual(this.assertFormulaErrorAndOtherFieldsExpectedValues.UIFormulaBoxEditText, uIFormulaBoxEdit.Text);

            // Verify that 'valueBox' text box's property 'Text' equals '82'
            Assert.AreEqual(this.assertFormulaErrorAndOtherFieldsExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that 'cellNameBox' text box's property 'Text' equals 'B1'
            Assert.AreEqual(this.assertFormulaErrorAndOtherFieldsExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);
        }
        
        /// <summary>
        /// enterDependentFormula - Use 'enterDependentFormulaParams' to pass parameters into this method.
        /// </summary>
        public void enterDependentFormula()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIFauxcelSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(224, 47));

            // Type '=b1+a1' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.enterDependentFormulaParams.UIFormulaBoxEditText;

            // Type '=b1+a1+3' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.enterDependentFormulaParams.UIFormulaBoxEditText1;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.enterDependentFormulaParams.UIFormulaBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// assertDataDisplayedAccurately - Use 'assertDataDisplayedAccuratelyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void assertDataDisplayedAccurately()
        {
            #region Variable Declarations
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            WinEdit uIValueBoxEdit = this.UIFauxcelSpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            #endregion

            // Verify that 'formulaBox' text box's property 'Text' equals '=b1+a1+3'
            Assert.AreEqual(this.assertDataDisplayedAccuratelyExpectedValues.UIFormulaBoxEditText, uIFormulaBoxEdit.Text);

            // Verify that 'valueBox' text box's property 'Text' equals '110'
            Assert.AreEqual(this.assertDataDisplayedAccuratelyExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);
        }
        
        /// <summary>
        /// createCircularDependency1 - Use 'createCircularDependency1Params' to pass parameters into this method.
        /// </summary>
        public void createCircularDependency1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIFauxcelSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(98, 83));

            // Type '=' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.createCircularDependency1Params.UIFormulaBoxEditText;

            // Type '=A3' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.createCircularDependency1Params.UIFormulaBoxEditText1;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.createCircularDependency1Params.UIFormulaBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// assertCircularDependency1 - Use 'assertCircularDependency1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void assertCircularDependency1()
        {
            #region Variable Declarations
            WinText uITheformulayouattemptText = this.UIFauxcelSpreadsheetWindow.UIStatusStrip1StatusBar.UITheformulayouattemptText;
            WinEdit uIValueBoxEdit = this.UIFauxcelSpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            #endregion

            // Verify that 'The formula you attempted to enter in to A3 causes...' label's property 'FriendlyName' equals 'The formula you attempted to enter in to A3 causes a circular dependency.'
            Assert.AreEqual(this.assertCircularDependency1ExpectedValues.UITheformulayouattemptTextFriendlyName, uITheformulayouattemptText.FriendlyName);

            // Verify that 'valueBox' text box's property 'Text' equals ''
            Assert.AreEqual(this.assertCircularDependency1ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);
        }
        
        #region Properties
        public virtual basicCellEntryParams basicCellEntryParams
        {
            get
            {
                if ((this.mbasicCellEntryParams == null))
                {
                    this.mbasicCellEntryParams = new basicCellEntryParams();
                }
                return this.mbasicCellEntryParams;
            }
        }
        
        public virtual DataEntryTestParams DataEntryTestParams
        {
            get
            {
                if ((this.mDataEntryTestParams == null))
                {
                    this.mDataEntryTestParams = new DataEntryTestParams();
                }
                return this.mDataEntryTestParams;
            }
        }
        
        public virtual basicCellEnntryParams basicCellEnntryParams
        {
            get
            {
                if ((this.mbasicCellEnntryParams == null))
                {
                    this.mbasicCellEnntryParams = new basicCellEnntryParams();
                }
                return this.mbasicCellEnntryParams;
            }
        }
        
        public virtual cellEntrySuccessExpectedValues cellEntrySuccessExpectedValues
        {
            get
            {
                if ((this.mcellEntrySuccessExpectedValues == null))
                {
                    this.mcellEntrySuccessExpectedValues = new cellEntrySuccessExpectedValues();
                }
                return this.mcellEntrySuccessExpectedValues;
            }
        }
        
        public virtual formulaCellEntryParams formulaCellEntryParams
        {
            get
            {
                if ((this.mformulaCellEntryParams == null))
                {
                    this.mformulaCellEntryParams = new formulaCellEntryParams();
                }
                return this.mformulaCellEntryParams;
            }
        }
        
        public virtual checkCellNameDisplayExpectedValues checkCellNameDisplayExpectedValues
        {
            get
            {
                if ((this.mcheckCellNameDisplayExpectedValues == null))
                {
                    this.mcheckCellNameDisplayExpectedValues = new checkCellNameDisplayExpectedValues();
                }
                return this.mcheckCellNameDisplayExpectedValues;
            }
        }
        
        public virtual inputInvalidFormulaParams inputInvalidFormulaParams
        {
            get
            {
                if ((this.minputInvalidFormulaParams == null))
                {
                    this.minputInvalidFormulaParams = new inputInvalidFormulaParams();
                }
                return this.minputInvalidFormulaParams;
            }
        }
        
        public virtual assertFormulaErrorAndOtherFieldsExpectedValues assertFormulaErrorAndOtherFieldsExpectedValues
        {
            get
            {
                if ((this.massertFormulaErrorAndOtherFieldsExpectedValues == null))
                {
                    this.massertFormulaErrorAndOtherFieldsExpectedValues = new assertFormulaErrorAndOtherFieldsExpectedValues();
                }
                return this.massertFormulaErrorAndOtherFieldsExpectedValues;
            }
        }
        
        public virtual enterDependentFormulaParams enterDependentFormulaParams
        {
            get
            {
                if ((this.menterDependentFormulaParams == null))
                {
                    this.menterDependentFormulaParams = new enterDependentFormulaParams();
                }
                return this.menterDependentFormulaParams;
            }
        }
        
        public virtual assertDataDisplayedAccuratelyExpectedValues assertDataDisplayedAccuratelyExpectedValues
        {
            get
            {
                if ((this.massertDataDisplayedAccuratelyExpectedValues == null))
                {
                    this.massertDataDisplayedAccuratelyExpectedValues = new assertDataDisplayedAccuratelyExpectedValues();
                }
                return this.massertDataDisplayedAccuratelyExpectedValues;
            }
        }
        
        public virtual createCircularDependency1Params createCircularDependency1Params
        {
            get
            {
                if ((this.mcreateCircularDependency1Params == null))
                {
                    this.mcreateCircularDependency1Params = new createCircularDependency1Params();
                }
                return this.mcreateCircularDependency1Params;
            }
        }
        
        public virtual assertCircularDependency1ExpectedValues assertCircularDependency1ExpectedValues
        {
            get
            {
                if ((this.massertCircularDependency1ExpectedValues == null))
                {
                    this.massertCircularDependency1ExpectedValues = new assertCircularDependency1ExpectedValues();
                }
                return this.massertCircularDependency1ExpectedValues;
            }
        }
        
        public UIFauxcelSpreadsheetWindow UIFauxcelSpreadsheetWindow
        {
            get
            {
                if ((this.mUIFauxcelSpreadsheetWindow == null))
                {
                    this.mUIFauxcelSpreadsheetWindow = new UIFauxcelSpreadsheetWindow();
                }
                return this.mUIFauxcelSpreadsheetWindow;
            }
        }
        
        public UIReleaseWindow UIReleaseWindow
        {
            get
            {
                if ((this.mUIReleaseWindow == null))
                {
                    this.mUIReleaseWindow = new UIReleaseWindow();
                }
                return this.mUIReleaseWindow;
            }
        }
        #endregion
        
        #region Fields
        private basicCellEntryParams mbasicCellEntryParams;
        
        private DataEntryTestParams mDataEntryTestParams;
        
        private basicCellEnntryParams mbasicCellEnntryParams;
        
        private cellEntrySuccessExpectedValues mcellEntrySuccessExpectedValues;
        
        private formulaCellEntryParams mformulaCellEntryParams;
        
        private checkCellNameDisplayExpectedValues mcheckCellNameDisplayExpectedValues;
        
        private inputInvalidFormulaParams minputInvalidFormulaParams;
        
        private assertFormulaErrorAndOtherFieldsExpectedValues massertFormulaErrorAndOtherFieldsExpectedValues;
        
        private enterDependentFormulaParams menterDependentFormulaParams;
        
        private assertDataDisplayedAccuratelyExpectedValues massertDataDisplayedAccuratelyExpectedValues;
        
        private createCircularDependency1Params mcreateCircularDependency1Params;
        
        private assertCircularDependency1ExpectedValues massertCircularDependency1ExpectedValues;
        
        private UIFauxcelSpreadsheetWindow mUIFauxcelSpreadsheetWindow;
        
        private UIReleaseWindow mUIReleaseWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'basicCellEntry'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class basicCellEntryParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.vshost.exe'
        /// </summary>
        public string UIFauxcelSpreadsheetWindowExePath = "C:\\Users\\Dave\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.vshost.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.vshost.exe'
        /// </summary>
        public string UIFauxcelSpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.vshost.exe" +
            "";
        
        /// <summary>
        /// Type '25' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText = "25";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DataEntryTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class DataEntryTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.vshost.exe'
        /// </summary>
        public string UIFauxcelSpreadsheetWindowExePath = "C:\\Users\\Dave\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.vshost.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.vshost.exe'
        /// </summary>
        public string UIFauxcelSpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.vshost.exe" +
            "";
        
        /// <summary>
        /// Type '25' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText = "25";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '25' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText1 = "25";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'basicCellEnntry'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class basicCellEnntryParams
    {
        
        #region Fields
        /// <summary>
        /// Type '25' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText = "25";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'cellEntrySuccess'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class cellEntrySuccessExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'formulaBox' text box's property 'Text' equals '25'
        /// </summary>
        public string UIFormulaBoxEditText = "25";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'formulaCellEntry'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class formulaCellEntryParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=8*9+(14-4)' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText = "=8*9+(14-4)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'checkCellNameDisplay'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class checkCellNameDisplayExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'cellNameBox' text box's property 'Text' equals 'B2'
        /// </summary>
        public string UICellNameBoxEditText = "B2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'inputInvalidFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class inputInvalidFormulaParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText = "=";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'assertFormulaErrorAndOtherFields'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class assertFormulaErrorAndOtherFieldsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your formula has an error: There must be at least ...' label's property 'FriendlyName' equals 'Your formula has an error: There must be at least one token in your formula.'
        /// </summary>
        public string UIYourformulahasanerroTextFriendlyName = "Your formula has an error: There must be at least one token in your formula.";
        
        /// <summary>
        /// Verify that 'formulaBox' text box's property 'Text' equals '=8*9+(14-4)'
        /// </summary>
        public string UIFormulaBoxEditText = "=8*9+(14-4)";
        
        /// <summary>
        /// Verify that 'valueBox' text box's property 'Text' equals '82'
        /// </summary>
        public string UIValueBoxEditText = "82";
        
        /// <summary>
        /// Verify that 'cellNameBox' text box's property 'Text' equals 'B1'
        /// </summary>
        public string UICellNameBoxEditText = "B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'enterDependentFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class enterDependentFormulaParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=b1+a1' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText = "=b1+a1";
        
        /// <summary>
        /// Type '=b1+a1+3' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText1 = "=b1+a1+3";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'assertDataDisplayedAccurately'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class assertDataDisplayedAccuratelyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'formulaBox' text box's property 'Text' equals '=b1+a1+3'
        /// </summary>
        public string UIFormulaBoxEditText = "=b1+a1+3";
        
        /// <summary>
        /// Verify that 'valueBox' text box's property 'Text' equals '110'
        /// </summary>
        public string UIValueBoxEditText = "110";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'createCircularDependency1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class createCircularDependency1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText = "=";
        
        /// <summary>
        /// Type '=A3' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText1 = "=A3";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'assertCircularDependency1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class assertCircularDependency1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'The formula you attempted to enter in to A3 causes...' label's property 'FriendlyName' equals 'The formula you attempted to enter in to A3 causes a circular dependency.'
        /// </summary>
        public string UITheformulayouattemptTextFriendlyName = "The formula you attempted to enter in to A3 causes a circular dependency.";
        
        /// <summary>
        /// Verify that 'valueBox' text box's property 'Text' equals ''
        /// </summary>
        public string UIValueBoxEditText = "";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFauxcelSpreadsheetWindow : WinWindow
    {
        
        public UIFauxcelSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Fauxcel Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFormLayoutWindow UIFormLayoutWindow
        {
            get
            {
                if ((this.mUIFormLayoutWindow == null))
                {
                    this.mUIFormLayoutWindow = new UIFormLayoutWindow(this);
                }
                return this.mUIFormLayoutWindow;
            }
        }
        
        public UIFormulaBoxWindow UIFormulaBoxWindow
        {
            get
            {
                if ((this.mUIFormulaBoxWindow == null))
                {
                    this.mUIFormulaBoxWindow = new UIFormulaBoxWindow(this);
                }
                return this.mUIFormulaBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICellNameBoxWindow UICellNameBoxWindow
        {
            get
            {
                if ((this.mUICellNameBoxWindow == null))
                {
                    this.mUICellNameBoxWindow = new UICellNameBoxWindow(this);
                }
                return this.mUICellNameBoxWindow;
            }
        }
        
        public UIStatusStrip1StatusBar UIStatusStrip1StatusBar
        {
            get
            {
                if ((this.mUIStatusStrip1StatusBar == null))
                {
                    this.mUIStatusStrip1StatusBar = new UIStatusStrip1StatusBar(this);
                }
                return this.mUIStatusStrip1StatusBar;
            }
        }
        
        public UIValueBoxWindow UIValueBoxWindow
        {
            get
            {
                if ((this.mUIValueBoxWindow == null))
                {
                    this.mUIValueBoxWindow = new UIValueBoxWindow(this);
                }
                return this.mUIValueBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFormLayoutWindow mUIFormLayoutWindow;
        
        private UIFormulaBoxWindow mUIFormulaBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UICellNameBoxWindow mUICellNameBoxWindow;
        
        private UIStatusStrip1StatusBar mUIStatusStrip1StatusBar;
        
        private UIValueBoxWindow mUIValueBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFormLayoutWindow : WinWindow
    {
        
        public UIFormLayoutWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "formLayout";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinWindow UIFormulaBoxWindow
        {
            get
            {
                if ((this.mUIFormulaBoxWindow == null))
                {
                    this.mUIFormulaBoxWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIFormulaBoxWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIFormulaBoxWindow.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUIFormulaBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIFormulaBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFormulaBoxWindow : WinWindow
    {
        
        public UIFormulaBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "formulaBox";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFormulaBoxEdit
        {
            get
            {
                if ((this.mUIFormulaBoxEdit == null))
                {
                    this.mUIFormulaBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFormulaBoxEdit.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUIFormulaBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFormulaBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICellNameBoxWindow : WinWindow
    {
        
        public UICellNameBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellNameBox";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameBoxEdit
        {
            get
            {
                if ((this.mUICellNameBoxEdit == null))
                {
                    this.mUICellNameBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameBoxEdit.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUICellNameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIStatusStrip1StatusBar : WinStatusBar
    {
        
        public UIStatusStrip1StatusBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinStatusBar.PropertyNames.Name] = "statusStrip1";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UIYourformulahasanerroText
        {
            get
            {
                if ((this.mUIYourformulahasanerroText == null))
                {
                    this.mUIYourformulahasanerroText = new WinText(this);
                    #region Search Criteria
                    this.mUIYourformulahasanerroText.SearchProperties[WinText.PropertyNames.Name] = "Your formula has an error: There must be at least one token in your formula.";
                    this.mUIYourformulahasanerroText.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUIYourformulahasanerroText;
            }
        }
        
        public WinText UITheformulayouattemptText
        {
            get
            {
                if ((this.mUITheformulayouattemptText == null))
                {
                    this.mUITheformulayouattemptText = new WinText(this);
                    #region Search Criteria
                    this.mUITheformulayouattemptText.SearchProperties[WinText.PropertyNames.Name] = "The formula you attempted to enter in to A3 causes a circular dependency.";
                    this.mUITheformulayouattemptText.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUITheformulayouattemptText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIYourformulahasanerroText;
        
        private WinText mUITheformulayouattemptText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIValueBoxWindow : WinWindow
    {
        
        public UIValueBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "valueBox";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueBoxEdit
        {
            get
            {
                if ((this.mUIValueBoxEdit == null))
                {
                    this.mUIValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueBoxEdit.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUIValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIReleaseWindow : WinWindow
    {
        
        public UIReleaseWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Release";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Release");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Release");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetGUIexeListItem UISpreadsheetGUIexeListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIexeListItem == null))
                {
                    this.mUISpreadsheetGUIexeListItem = new UISpreadsheetGUIexeListItem(this);
                }
                return this.mUISpreadsheetGUIexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetGUIexeListItem mUISpreadsheetGUIexeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetGUIexeListItem : WinListItem
    {
        
        public UISpreadsheetGUIexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI.exe";
            this.WindowTitles.Add("Release");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Release");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
}
