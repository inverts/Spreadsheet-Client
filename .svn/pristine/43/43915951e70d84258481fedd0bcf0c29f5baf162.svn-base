<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetUtilities</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetUtilities.DependencyGraph">
             <summary>
             A DependencyGraph can be modeled as a set of ordered pairs of strings.  Two ordered pairs
             (s1,t1) and (s2,t2) are considered equal if and only if s1 equals s2 and t1 equals t2.
             (Recall that sets never contain duplicates.  If an attempt is made to add an element to a 
             set, and the element is already in the set, the set remains unchanged.)
             
             Given a DependencyGraph DG:
             
                (1) If s is a string, the set of all strings t such that (s,t) is in DG is called dependents(s).
                    
                (2) If s is a string, the set of all strings t such that (t,s) is in DG is called dependees(s).
            
             For example, suppose DG = {("a", "b"), ("a", "c"), ("b", "d"), ("d", "d")}
                 dependents("a") = {"b", "c"}
                 dependents("b") = {"d"}
                 dependents("c") = {}
                 dependents("d") = {"d"}
                 dependees("a") = {}
                 dependees("b") = {"a"}
                 dependees("c") = {"a"}
                 dependees("d") = {"b", "d"}
             </summary>
        </member>
        <member name="F:SpreadsheetUtilities.DependencyGraph.nodes">
            <summary>
            A set of nodes contained in this graph. This is NOT a set of dependencies!
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.#ctor">
            <summary>
            Creates an empty DependencyGraph.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependents(System.String)">
            <summary>
            Reports whether dependents(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependees(System.String)">
            <summary>
            Reports whether dependees(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependents(System.String)">
            <summary>
            Enumerates dependents(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependees(System.String)">
            <summary>
            Enumerates dependees(s).
            </summary>
            <param name="s">The string you wish to get the dependees of.</param>
            <returns>An IEnumerable of dependee strings.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(System.String,System.String)">
            <summary>
            Adds the ordered pair (s,t), if it doesn't exist
            </summary>
            <param name="s">The dependee of t.</param>
            <param name="t">The dependent of s.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependency(System.String,System.String)">
            <summary>
            Removes the ordered pair (s,t), if it exists
            </summary>
            <param name="s">The dependee of t.</param>
            <param name="t">The dependent of s.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependents(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (s,r).  Then, for each
            t in newDependents, adds the ordered pair (s,t).
            </summary>
            <param name="s">The string to replace dependents of.</param>
            <param name="newDependents">An IEnumerable of new dependents as strings.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependees(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (r,s).  Then, for each 
            t in newDependees, adds the ordered pair (t,s).
            </summary>
            <param name="s">The string to replace the dependees of.</param>
            <param name="newDependees">An IEnumerable of new dependees as strings.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.getNode(System.String)">
            <summary>
            Looks for an existing node in the set of nodes and returns this node. If
            no such node exists, it creates a new node using the string specified, 
            adds it to the list of nodes, and returns it.
            </summary>
            <param name="s">The string label/name of the node (or node to be created).</param>
            <returns>A StringNode matching the string provided.</returns>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Size">
            <summary>
            The number of ordered pairs in the DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Item(System.String)">
            <summary>
            The size of dependees(s).
            This property is an example of an indexer.  If dg is a DependencyGraph, you would
            invoke it like this:
            dg["a"]
            It should return the size of dependees("a")
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.DependencyGraph.StringNode">
            <summary>
            Represents a string-valued node for our dependency graph.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.StringNode.#ctor(System.String)">
            <summary>
            Creates a new string node with no dependents or dependees.
            </summary>
            <param name="s">The string to label the node by.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.StringNode.addDependent(SpreadsheetUtilities.DependencyGraph.StringNode)">
            <summary>
            Adds a dependent to this node. Does NOT force the new dependent to
            recognize this node as a dependee.
            </summary>
            <param name="sn">The StringNode to add as a dependent.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.StringNode.addDependee(SpreadsheetUtilities.DependencyGraph.StringNode)">
            <summary>
            Adds a dependee to this node. Does NOT force the new dependee to 
            recognize this node as a dependent.
            </summary>
            <param name="sn">The StringNode to add as a dependee.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.StringNode.removeDependent(System.String)">
            <summary>
            Removes a dependent from this node if it exists.
            </summary>
            <param name="s">The string name/label of the dependent to be removed.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.StringNode.removeDependee(System.String)">
            <summary>
            Removes a dependee from this node if it exists.
            </summary>
            <param name="s">The string name/label of the dependee to be removed.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.StringNode.replaceDependents(System.Collections.Generic.Dictionary{System.String,SpreadsheetUtilities.DependencyGraph.StringNode})">
            <summary>
            Replaces all the dependents of this node with new ones.
            </summary>
            <param name="dependents">A Dictionary of new StringNode dependents indexed by strings identical to the StringNode names.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.StringNode.replaceDependees(System.Collections.Generic.Dictionary{System.String,SpreadsheetUtilities.DependencyGraph.StringNode})">
            <summary>
            Replaces all the dependees of this node with new ones.
            </summary>
            <param name="dependees">A Dictionary of new StringNode dependees indexed by strings identical to the StringNode names.</param>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.StringNode.Name">
            <summary>
            The name of the node.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.StringNode.Dependents">
            <summary>
            A list of the node's dependents.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.StringNode.Dependees">
            <summary>
            A list of the node's dependees.
            </summary>
        </member>
    </members>
</doc>
