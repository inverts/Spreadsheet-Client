// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetUITester
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// SimpleCellEntry - Use 'SimpleCellEntryParams' to pass parameters into this method.
        /// </summary>
        public void SimpleCellEntry()
        {
            #region Variable Declarations
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            #endregion

            // Type 'Let's open a new sheet.' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.SimpleCellEntryParams.UIFormulaBoxEditText;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.SimpleCellEntryParams.UIFormulaBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertDataEntry - Use 'AssertDataEntryExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertDataEntry()
        {
            #region Variable Declarations
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            WinEdit uIValueBoxEdit = this.UIFauxcelSpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uICellNameBoxEdit = this.UIFauxcelSpreadsheetWindow.UICellNameBoxWindow.UICellNameBoxEdit;
            #endregion

            // Verify that 'formulaBox' text box's property 'Text' equals 'Let's open a new sheet.'
            Assert.AreEqual(this.AssertDataEntryExpectedValues.UIFormulaBoxEditText, uIFormulaBoxEdit.Text);

            // Verify that 'valueBox' text box's property 'Text' equals 'Let's open a new sheet.'
            Assert.AreEqual(this.AssertDataEntryExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that 'cellNameBox' text box's property 'Text' equals 'A1'
            Assert.AreEqual(this.AssertDataEntryExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);
        }
        
        /// <summary>
        /// PerformExtensiveUsage - Use 'PerformExtensiveUsageParams' to pass parameters into this method.
        /// </summary>
        public void PerformExtensiveUsage()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UIFauxcelSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinButton uICloseButton = this.UIFauxcelSpreadsheetWindow.UIFauxcelSpreadsheetTitleBar.UICloseButton;
            WinEdit uIFormulaBoxEdit = this.UIFauxcelSpreadsheetWindow.UIFormulaBoxWindow.UIFormulaBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UIFauxcelSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinMenuItem uIGeneralHelpMenuItem = this.UIFauxcelSpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIGeneralHelpMenuItem;
            WinButton uIOKButton = this.UISpreadsheetHelpWindow.UIOKWindow.UIOKButton;
            WinMenuItem uICloseMenuItem = this.UIFauxcelSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UIUnsavedChangesWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(43, 10));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(20, 17));

            // Type '1' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.PerformExtensiveUsageParams.UIFormulaBoxEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(134, 43));

            // Type '2' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.PerformExtensiveUsageParams.UIFormulaBoxEditText1;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(214, 37));

            // Type '3' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.PerformExtensiveUsageParams.UIFormulaBoxEditText2;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.PerformExtensiveUsageParams.UIFormulaBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(304, 43));

            // Type '=C1+A1+B1' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.PerformExtensiveUsageParams.UIFormulaBoxEditText3;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(306, 57));

            // Type '=D1+10' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.PerformExtensiveUsageParams.UIFormulaBoxEditText4;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.PerformExtensiveUsageParams.UIFormulaBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(58, 43));

            // Type '=d2' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.PerformExtensiveUsageParams.UIFormulaBoxEditText5;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.PerformExtensiveUsageParams.UIFormulaBoxEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(73, 76));

            // Type '=A2' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.PerformExtensiveUsageParams.UIFormulaBoxEditText6;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(132, 75));

            // Type '=5+4/0' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.PerformExtensiveUsageParams.UIFormulaBoxEditText7;

            // Type '{Enter}' in 'formulaBox' text box
            Keyboard.SendKeys(uIFormulaBoxEdit, this.PerformExtensiveUsageParams.UIFormulaBoxEditSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(94, 79));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(85, 103));

            // Type '0' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.PerformExtensiveUsageParams.UIFormulaBoxEditText8;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(156, 99));

            // Type '=5/A4' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.PerformExtensiveUsageParams.UIFormulaBoxEditText9;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(141, 117));

            // Type '=10/(C1-B1-A1)' in 'formulaBox' text box
            uIFormulaBoxEdit.Text = this.PerformExtensiveUsageParams.UIFormulaBoxEditText10;

            // Click 'Help' -> 'General Help' menu item
            Mouse.Click(uIGeneralHelpMenuItem, new Point(125, 10));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(27, 5));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(69, 18));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(34, 9));
        }
        
        #region Properties
        public virtual SimpleCellEntryParams SimpleCellEntryParams
        {
            get
            {
                if ((this.mSimpleCellEntryParams == null))
                {
                    this.mSimpleCellEntryParams = new SimpleCellEntryParams();
                }
                return this.mSimpleCellEntryParams;
            }
        }
        
        public virtual AssertDataEntryExpectedValues AssertDataEntryExpectedValues
        {
            get
            {
                if ((this.mAssertDataEntryExpectedValues == null))
                {
                    this.mAssertDataEntryExpectedValues = new AssertDataEntryExpectedValues();
                }
                return this.mAssertDataEntryExpectedValues;
            }
        }
        
        public virtual PerformExtensiveUsageParams PerformExtensiveUsageParams
        {
            get
            {
                if ((this.mPerformExtensiveUsageParams == null))
                {
                    this.mPerformExtensiveUsageParams = new PerformExtensiveUsageParams();
                }
                return this.mPerformExtensiveUsageParams;
            }
        }
        
        public UIFauxcelSpreadsheetWindow UIFauxcelSpreadsheetWindow
        {
            get
            {
                if ((this.mUIFauxcelSpreadsheetWindow == null))
                {
                    this.mUIFauxcelSpreadsheetWindow = new UIFauxcelSpreadsheetWindow();
                }
                return this.mUIFauxcelSpreadsheetWindow;
            }
        }
        
        public UISpreadsheetHelpWindow UISpreadsheetHelpWindow
        {
            get
            {
                if ((this.mUISpreadsheetHelpWindow == null))
                {
                    this.mUISpreadsheetHelpWindow = new UISpreadsheetHelpWindow();
                }
                return this.mUISpreadsheetHelpWindow;
            }
        }
        
        public UIUnsavedChangesWindow UIUnsavedChangesWindow
        {
            get
            {
                if ((this.mUIUnsavedChangesWindow == null))
                {
                    this.mUIUnsavedChangesWindow = new UIUnsavedChangesWindow();
                }
                return this.mUIUnsavedChangesWindow;
            }
        }
        #endregion
        
        #region Fields
        private SimpleCellEntryParams mSimpleCellEntryParams;
        
        private AssertDataEntryExpectedValues mAssertDataEntryExpectedValues;
        
        private PerformExtensiveUsageParams mPerformExtensiveUsageParams;
        
        private UIFauxcelSpreadsheetWindow mUIFauxcelSpreadsheetWindow;
        
        private UISpreadsheetHelpWindow mUISpreadsheetHelpWindow;
        
        private UIUnsavedChangesWindow mUIUnsavedChangesWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SimpleCellEntry'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SimpleCellEntryParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Let's open a new sheet.' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText = "Let\'s open a new sheet.";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDataEntry'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertDataEntryExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'formulaBox' text box's property 'Text' equals 'Let's open a new sheet.'
        /// </summary>
        public string UIFormulaBoxEditText = "Let\'s open a new sheet.";
        
        /// <summary>
        /// Verify that 'valueBox' text box's property 'Text' equals 'Let's open a new sheet.'
        /// </summary>
        public string UIValueBoxEditText = "Let\'s open a new sheet.";
        
        /// <summary>
        /// Verify that 'cellNameBox' text box's property 'Text' equals 'A1'
        /// </summary>
        public string UICellNameBoxEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PerformExtensiveUsage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PerformExtensiveUsageParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText = "1";
        
        /// <summary>
        /// Type '2' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText1 = "2";
        
        /// <summary>
        /// Type '3' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=C1+A1+B1' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText3 = "=C1+A1+B1";
        
        /// <summary>
        /// Type '=D1+10' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText4 = "=D1+10";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=d2' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText5 = "=d2";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=A2' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText6 = "=A2";
        
        /// <summary>
        /// Type '=5+4/0' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText7 = "=5+4/0";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '0' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText8 = "0";
        
        /// <summary>
        /// Type '=5/A4' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText9 = "=5/A4";
        
        /// <summary>
        /// Type '=10/(C1-B1-A1)' in 'formulaBox' text box
        /// </summary>
        public string UIFormulaBoxEditText10 = "=10/(C1-B1-A1)";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFauxcelSpreadsheetWindow : WinWindow
    {
        
        public UIFauxcelSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Fauxcel Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFormulaBoxWindow UIFormulaBoxWindow
        {
            get
            {
                if ((this.mUIFormulaBoxWindow == null))
                {
                    this.mUIFormulaBoxWindow = new UIFormulaBoxWindow(this);
                }
                return this.mUIFormulaBoxWindow;
            }
        }
        
        public UIValueBoxWindow UIValueBoxWindow
        {
            get
            {
                if ((this.mUIValueBoxWindow == null))
                {
                    this.mUIValueBoxWindow = new UIValueBoxWindow(this);
                }
                return this.mUIValueBoxWindow;
            }
        }
        
        public UICellNameBoxWindow UICellNameBoxWindow
        {
            get
            {
                if ((this.mUICellNameBoxWindow == null))
                {
                    this.mUICellNameBoxWindow = new UICellNameBoxWindow(this);
                }
                return this.mUICellNameBoxWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIFauxcelSpreadsheetTitleBar UIFauxcelSpreadsheetTitleBar
        {
            get
            {
                if ((this.mUIFauxcelSpreadsheetTitleBar == null))
                {
                    this.mUIFauxcelSpreadsheetTitleBar = new UIFauxcelSpreadsheetTitleBar(this);
                }
                return this.mUIFauxcelSpreadsheetTitleBar;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFormulaBoxWindow mUIFormulaBoxWindow;
        
        private UIValueBoxWindow mUIValueBoxWindow;
        
        private UICellNameBoxWindow mUICellNameBoxWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIFauxcelSpreadsheetTitleBar mUIFauxcelSpreadsheetTitleBar;
        
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFormulaBoxWindow : WinWindow
    {
        
        public UIFormulaBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "formulaBox";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFormulaBoxEdit
        {
            get
            {
                if ((this.mUIFormulaBoxEdit == null))
                {
                    this.mUIFormulaBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFormulaBoxEdit.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUIFormulaBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFormulaBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIValueBoxWindow : WinWindow
    {
        
        public UIValueBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "valueBox";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueBoxEdit
        {
            get
            {
                if ((this.mUIValueBoxEdit == null))
                {
                    this.mUIValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueBoxEdit.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUIValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICellNameBoxWindow : WinWindow
    {
        
        public UICellNameBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellNameBox";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameBoxEdit
        {
            get
            {
                if ((this.mUICellNameBoxEdit == null))
                {
                    this.mUICellNameBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameBoxEdit.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUICellNameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIGeneralHelpMenuItem
        {
            get
            {
                if ((this.mUIGeneralHelpMenuItem == null))
                {
                    this.mUIGeneralHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIGeneralHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "General Help";
                    this.mUIGeneralHelpMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIGeneralHelpMenuItem.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUIGeneralHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIGeneralHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFauxcelSpreadsheetTitleBar : WinTitleBar
    {
        
        public UIFauxcelSpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Fauxcel Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Fauxcel Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetHelpWindow : WinWindow
    {
        
        public UISpreadsheetHelpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet Help";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Spreadsheet Help");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Spreadsheet Help");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Spreadsheet Help");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIUnsavedChangesWindow : WinWindow
    {
        
        public UIUnsavedChangesWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Unsaved Changes";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Unsaved Changes");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Unsaved Changes");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Unsaved Changes");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
}
